Call 04 Monthly Status Report
April 2020

Table of Contents
=================
1. Boston College
2. Trevor Crawford
3. Eric Lahti
4. Matt Lietz
5. Chris McGeorge
6. Dan Topa
7. Jon White


Progress and Achievements
=========================

1. Boston College (BC)
    Performed analysis of magnetic field effects on ray-tracing in the context of the project application. Determined that these effects are significant and need to be included for even reasonable fidelity solutions.
    Presented results to sponsor who concurred with conclusions. The results inform the use of ray tracing codes in the project and suggest that we will continue with PHaRLAP as a tool in Call 04.
    Consulted ERT team on TICS/ALFA implementation in C, particularly on IRI module translation.
    Started integrating components for ALFA python prototype.

2. Trevor Crawford
    No report.

3. Eric Lahti
    Your achievements here.

4. Matt Lietz
    Converted QPS C code into JavaScript with unit test showcasing same output and confidence in complete conversion
    Converted Homing algorithm with stubbed out ray tracer functionality
    Ironed out 11 parameter JSON suite with approval on units and display order and metadata
    Created 3D Fan Grid for Ionosphere interpolation
    Created new JSON object containing 3D Fan Grid for ray tracer to use
    Signed up for DI2E onboarding and account creation
    Fixed bugs and added recommendation on coefficient grid dashboard per Nelson's request - This helps test the 11 parameter JSON

5. Chris McGeorge
    Ascertained consistency between the PHaRLAP-based IRI that TICS uses and the Goddard IRI, by calling the Goddard IRI executable.  Began testing calling Goddard IRI as a library (which Dan Topa excellently and quickly provided) instead of as an executable.
    Began implementing a C version of the Python RIPE component of TICS.

6. Dan Topa
    Developed makefiles to compile the IRI code into a sequence of shared object files using -std=legacy and delivered libiri.so.m. Provided output detailing
        compilation flags.
    Identified and reported on IRI tools for interactive running and integration with Python and MATLAB.
    Delivered detailed analysis of 116 instances in IRI code where IRI do loops reference outside array bounds.
    Delivered memo on fundamental terrestrial constants and a survey of terrestrial coordinate systems.

7. Jon White
    Found that bug in adaptive step size JS ray tracer was due to the way JS handles passing of arguments
        Need to ensure that Objects containing Objects are deep copied, so that data isn't altered when it shouldn't be.
    Was not able to eliminate differences between JS and C ray tracers; JS returns different values for same input of transcendental functions
    Did confirm that JS adaptive-step ray tracer returned same output as fixed-step ray tracer when step adjustment was turned off.
    Ran performance tests on 2nd-order Leapfrog and 4th-order Runge-Kutta with fixed and adaptive step sizes
        The 4th-order method does not provide a performance benefit at our desired accuracy requirement.
        The adaptive-step method does not provide a performance benefit over fixed-step method
    Wrote class to read JSON file for Ionosphere grid and perform trilinear interpolation between grid points
        JS ray tracer with trilinear interpolation is between 3-4 times slower than using Chapman function.
        This is a smaller loss of performance than anticipated; no need to try to improve performance beyond current capability.
